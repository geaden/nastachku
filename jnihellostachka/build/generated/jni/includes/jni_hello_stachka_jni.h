// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     /Users/geaden/work/nastachku/jnigenerator/python/gen_script/jni_generator.py
// For
//     com/example/jnihellostachka/JniHelloStachka

#ifndef com_example_jnihellostachka_JniHelloStachka_JNI
#define com_example_jnihellostachka_JniHelloStachka_JNI

#include <jni.h>
#include "jni_generator_native_essential.h"



typedef jint JniIntWrapper;

inline jint as_jint(JniIntWrapper wrapper) {
  return wrapper;
}

// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_com_example_jnihellostachka_JniHelloStachka[];
const char kClassPath_com_example_jnihellostachka_JniHelloStachka[] =
    "com/example/jnihellostachka/JniHelloStachka";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_com_example_jnihellostachka_JniHelloStachka_clazz(nullptr);
#ifndef com_example_jnihellostachka_JniHelloStachka_clazz_defined
#define com_example_jnihellostachka_JniHelloStachka_clazz_defined
inline jclass com_example_jnihellostachka_JniHelloStachka_clazz(JNIEnv* env) {
    return env->FindClass(kClassPath_com_example_jnihellostachka_JniHelloStachka);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static chromium::android::ScopedJavaLocalRef<jstring> JNI_JniHelloStachka_SayHello(JNIEnv* env,
    const chromium::android::JavaParamRef<jobject>& jcaller,
    const chromium::android::JavaParamRef<jstring>& name);

JNI_GENERATOR_EXPORT jstring Java_com_example_jnihellostachka_JniHelloStachka_nativeSayHello(
    JNIEnv* env,
    jobject jcaller,
    jstring name) {
  return JNI_JniHelloStachka_SayHello(env, chromium::android::JavaParamRef<jobject>(env, jcaller),
      chromium::android::JavaParamRef<jstring>(env, name)).Release();
}


static std::atomic<jmethodID> g_com_example_jnihellostachka_JniHelloStachka_logCall(nullptr);
static void Java_JniHelloStachka_logCall(JNIEnv* env, const chromium::android::JavaRef<jobject>&
    obj) {
  jclass clazz = com_example_jnihellostachka_JniHelloStachka_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      com_example_jnihellostachka_JniHelloStachka_clazz(env));
  chromium::android::JniJavaCallContextChecked call_context;
  call_context.Init<
      chromium::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "logCall",
          "()V",
          &g_com_example_jnihellostachka_JniHelloStachka_logCall);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // com_example_jnihellostachka_JniHelloStachka_JNI
